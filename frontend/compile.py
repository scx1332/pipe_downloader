# walk through files in a frontend
import os
import base64


rust_header = """//autogenerated by compile.py script
use actix_web::{Scope, web};

#[rustfmt::skip]
mod endpoints {
    use actix_web::{HttpResponse, Responder};
    use base64::{engine::general_purpose, Engine as _};"""

rust_endpoint_template = """

    pub async fn %%FUNCTION_NAME%%() -> impl Responder {
        let base64 = "%%BASE64%%";
        let html = general_purpose::STANDARD.decode(base64).unwrap();
        HttpResponse::Ok().content_type("%%CONTENT_TYPE%%").body(html)
    }"""

rust_scope_fn = """
}

#[rustfmt::skip]
pub fn frontend_scope() -> Scope {
    let mut scope = Scope::new("frontend");%%SCOPES%%
    scope
}
"""

rust_scope_template = """
    scope = scope.route("%%ROUTE%%", web::get().to(%%FUNCTION_NAME%%));"""


rust_file_content = rust_header

rust_scope_content = ""

next_id = 1
for root, dirs, files in os.walk("frontend"):
    # this should normalize paths both on windows and linux
    file_dir = (root + "/").replace("\\", "/").replace("//", "/").replace("frontend/", "")
    for file in files:
        with open(os.path.join(root, file), "rb") as f:
            bin = f.read()

            if file.endswith(".js"):
                content_type = "application/javascript"
            elif file.endswith(".css"):
                content_type = "text/css"
            elif file.endswith(".html"):
                content_type = "text/html"
            elif file.endswith(".png"):
                content_type = "image/png"
            else:
                raise Exception(f"Unknown file type {file} add to compile.py script.")

            print(f"Adding file {os.path.join(file_dir, file)}. Size {len(bin)}")

            rust_file_content += rust_endpoint_template\
                .replace("%%FUNCTION_NAME%%", f"fn_{next_id:02}")\
                .replace("%%BASE64%%", base64.b64encode(bin).decode("utf-8"))\
                .replace("%%CONTENT_TYPE%%", content_type)

            rust_scope_content += rust_scope_template\
                .replace("%%ROUTE%%", f"/{file_dir}{file}")\
                .replace("%%FUNCTION_NAME%%", f"endpoints::fn_{next_id:02}")
            next_id += 1

print("")
rust_file_content += rust_scope_fn.replace("%%SCOPES%%", rust_scope_content)
print(f"Generated rust file content: size {len(rust_file_content) / 1000} kBytes.")

with open("frontend.rs", "w") as f:
    f.write(rust_file_content)

